# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input Filter {
  column: String
  entityName: String!
  givenValue: String
  latest: Boolean
  operator: String
}

type JoinedTable {
  academic_state: String
  coalition: String
  created_date: DateTime
  grade: String
  intra_id: String
  intra_no: Int!
  name: String
  start_process: DateTime
  userAccessCardInformation: [UserAccessCardInformation!]
  userBlackhole: [UserBlackhole!]
  userComputationFund: [UserComputationFund!]
  userCourseExtension: [UserCourseExtension!]
  userEducationFundState: [UserEducationFundState!]
  userEmploymentAndFound: [UserEmploymentStatus!]
  userEmploymentStatus: [UserEmploymentStatus!]
  userHrdNetUtilize: [UserHrdNetUtilize!]
  userInterruptionOfCourse: [UserInterruptionOfCourse!]
  userLapiscineInformation: [UserLapiscineInformation!]
  userLearningDataAPI: [UserLearningDataAPI!]
  userLeaveOfAbsence: [UserLeaveOfAbsence!]
  userLoyaltyManagement: [UserLoyaltyManagement!]
  userOtherInformation: [UserOtherInformation!]
  userPersonalInformation: [UserPersonalInformation!]
}

type Mutation {
  deleteUserInformation(column: String!, entityName: String!, intra_no: Int!, pk: Int!, value: String!): Boolean!
  recoverUserInformaiton(column: String!, entityName: String!, intra_no: Int!, pk: Int!, value: String!): Boolean!
  softDeleteRemoveWithdrawTest(column: String!, entityName: String!, intra_no: Int!, pk: Int!, value: String!): [JoinedTable!]!
  updateUserInformation(column: String!, entityName: String!, intra_no: Int!, pk: Int!, value: String!): Boolean!
}

type Query {
  getDomainOfColumnFilter(filters: [Filter!]!, skip: Int, take: Int): [JoinedTable!]!
  getLatestData: String!
  getNumOfPeopleByFilter(filters: [Filter!]!, skip: Int, take: Int): Int!
  getPeopleByFilter(filters: [Filter!]!, skip: Int, take: Int): [JoinedTable!]!
  getPeopleByFilterForAdmin(filters: [Filter!]!, skip: Int, take: Int): [JoinedTable!]!
  getUser(column: String, duplicated: String!): [User!]!
  getUserAccessCardInformation(column: String, duplicated: String!): [UserAccessCardInformation!]!
  getUserBlackhole(column: String, duplicated: String!): [UserBlackhole!]!
  getUserComputationFund(column: String, duplicated: String!): [UserComputationFund!]!
  getUserCourseExtension(column: String, duplicated: String!): [UserCourseExtension!]!
  getUserEducationFundState(column: String, duplicated: String!): [UserEducationFundState!]!
  getUserEmploymentStatus(column: String, duplicated: String!): [UserEmploymentStatus!]!
  getUserHrdNetUtilize(column: String, duplicated: String!): [UserHrdNetUtilize!]!
  getUserHrdNetUtilizeConsent(column: String, duplicated: String!): [UserHrdNetUtilizeConsent!]!
  getUserInterruptionOfCourse(column: String, duplicated: String!): [UserInterruptionOfCourse!]!
  getUserLapiscineInformation(column: String, duplicated: String!): [UserLapiscineInformation!]!
  getUserLeaningDataAPI(column: String, duplicated: String!): [UserLearningDataAPI!]!
  getUserLeaveOfAbsence(column: String, duplicated: String!): [UserLeaveOfAbsence!]!
  getUserLoyaltyManagement(column: String, duplicated: String!): [UserLoyaltyManagement!]!
  getUserOtherEmploymentStatus(column: String, duplicated: String!): [UserOtherEmploymentStatus!]!
  getUserOtherInformation(column: String, duplicated: String!): [UserOtherInformation!]!
  getUserPersonalInformation(column: String, duplicated: String!): [UserPersonalInformation!]!
  tempFunction: [JoinedTable!]!
  updateData: String!
  updateOldData: String!
}

type User {
  academic_state: String!
  anonymization: String!
  coalition: String!
  created_date: DateTime!
  deleted_date: DateTime!
  grade: String!
  intra_id: String!
  intra_no: Int!
  name: String!
  uniqueness: String!
}

type UserAccessCardInformation {
  created_date: DateTime!
  deleted_date: DateTime!
  lapiscine_logical_number: Int!
  lapiscine_physical_number: Int!
  logical_number_for_main_course: Int!
  name_of_entry_card_for_main_course: String!
  pk: Int!
  profile_picture_path: String!
}

type UserBlackhole {
  blackhole_date: DateTime!
  blackholed: String
  blackholed_level: Float
  created_date: DateTime!
  deleted_date: DateTime!
  pk: Float!
  reason_of_blackhole: String
  remarks: String
}

type UserComputationFund {
  created_date: DateTime!
  deleted_date: DateTime!
  payment_date: DateTime
  pk: Int!
  received: String!
  recevied_amount: String!
}

type UserCourseExtension {
  basic_expiration_date: DateTime!
  created_date: DateTime!
  deleted_date: DateTime!
  extension_circle: String
  extension_level: String
  final_expiration_date: DateTime!
  pk: Float!
  request_extension: String
}

type UserEducationFundState {
  created_date: DateTime!
  deleted_date: DateTime!
  payment_end_date: DateTime
  payment_ended: String
  pk: Float!
  remarks: String
  total_payment_of_money: String
  total_payment_of_number: Float
}

type UserEmploymentStatus {
  created_date: DateTime!
  deleted_date: DateTime!
  employment: String!
  emplyment_date: DateTime
  enterprise: String
  pk: Float!
}

type UserHrdNetUtilize {
  business_registration_number: String
  created_date: DateTime!
  deleted_date: DateTime!
  employment_insurance_date: DateTime
  employmented: String!
  enterprise_size: String
  health_insurance_enterprise: String
  hrd_net_date: DateTime
  pk: Float!
}

type UserHrdNetUtilizeConsent {
  consent_to_provide_information: String!
  consented_date: DateTime
  created_date: DateTime!
  deleted_date: DateTime!
  pk: Float!
}

type UserInterruptionOfCourse {
  HRD_Net_drop_out: String
  breaked: String
  created_date: DateTime!
  date_of_break: DateTime!
  deleted_date: DateTime!
  pk: Float!
  reason_of_break: String
}

type UserLapiscineInformation {
  deleted_date: DateTime!
  lapiscine_degree: String
  lapiscine_final_score: Float
  lapiscine_grade: String
  pk: Float!
  record_participate_lapiscine: String
}

type UserLearningDataAPI {
  circle: Float
  circled_date: DateTime
  coalition_score: Float
  created_date: DateTime!
  deleted_date: DateTime!
  level: Float
  leveled_date: DateTime
  out_circle: String
  out_circle_date: DateTime
  pk: Float!
  scored_date: DateTime
}

type UserLeaveOfAbsence {
  AGU_reason: String
  absence_reason: String
  absenced: String
  begin_absence_date: DateTime
  created_date: DateTime!
  deleted_date: DateTime!
  end_absence_date: DateTime
  pk: Float!
  remarks: String
  return_from_absence_date: DateTime
}

type UserLoyaltyManagement {
  created_date: DateTime!
  deleted_date: DateTime!
  loyalty_circle: String
  loyalty_period: String
  loyalty_presence: String
  pk: Float!
}

type UserOtherEmploymentStatus {
  created_date: DateTime!
  deleted_date: DateTime!
  employment_date: DateTime
  enterprise: String
  pk: Float!
}

type UserOtherInformation {
  created_date: DateTime!
  deleted_date: DateTime!
  highest_level_of_education: String!
  major_name: String!
  majored: String!
  pk: Int!
}

type UserPersonalInformation {
  age: String!
  birthday: String!
  created_date: DateTime!
  deleted_date: DateTime!
  email: String!
  gender: String!
  phone_number: String!
  pk: Int!
  region: String!
  social_security_key: String!
}
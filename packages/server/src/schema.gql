# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input Filter {
  column: String
  entityName: String!
  givenValue: String
  latest: Boolean
  operator: String
}

type JoinedTable {
  academic_state: String
  coalition: String
  created_date: DateTime
  grade: String
  intra_id: String
  intra_no: Int!
  name: String
  start_process: DateTime
  userAccessCardInformation: [UserAccessCardInformation!]
  userBlackhole: [UserBlackhole!]
  userComputationFund: [UserComputationFund!]
  userEducationFundState: [UserEducationFundState!]
  userEmploymentAndFound: [UserEmploymentAndFound!]
  userEmploymentStatus: [UserEmploymentStatus!]
  userHrdNetUtilize: [UserHrdNetUtilize!]
  userInternStatus: [UserInternStatus!]
  userLapiscineInformation: [UserLapiscineInformation!]
  userLearningData: [UserLearningData!]
  userLeaveOfAbsence: [UserLeaveOfAbsence!]
  userOtherInformation: [UserOtherInformation!]
  userPersonalInformation: [UserPersonalInformation!]
  userProcessProgress: [UserProcessProgress!]
  userReasonOfBreak: [UserReasonOfBreak!]
}

type Mutation {
  deleteUserInformation(column: String!, entityName: String!, intra_no: Int!, pk: Int!, value: String!): Boolean!
  recoverUserInformaiton(column: String!, entityName: String!, intra_no: Int!, pk: Int!, value: String!): Boolean!
  softDeleteRemoveWithdrawTest(column: String!, entityName: String!, intra_no: Int!, pk: Int!, value: String!): [JoinedTable!]!
  updateUserInformation(column: String!, entityName: String!, intra_no: Int!, pk: Int!, value: String!): Boolean!
}

type Query {
  getAllSpread: String!
  getNumOfPeopleByFilter(filters: [Filter!]!, skip: Int, take: Int): Int!
  getOldData: String!
  getPeopleByFilter(filters: [Filter!]!, skip: Int, take: Int): [JoinedTable!]!
  getPeopleByFilterForAdmin(filters: [Filter!]!, skip: Int, take: Int): [JoinedTable!]!
  getUserAccessCardInformation: [UserAccessCardInformation!]!
  getUserBlackhole: [UserBlackhole!]!
  getUserComputationFund: [UserComputationFund!]!
  getUserEmploymentAndFound: [UserEmploymentAndFound!]!
  getUserEmploymentStatus: [UserEmploymentStatus!]!
  getUserHrdNetUtilize: [UserHrdNetUtilize!]!
  getUserInternStatus: [UserEducationFundState!]!
  getUserLeaningData: [UserLearningData!]!
  getUserLeaveOfAbsence: [UserLeaveOfAbsence!]!
  getUserOtherInformation(created_date: DateTime!, experience_of_software_developing: String!, highest_level_of_education: String!, major: String!, major_field: String!, major_name: String!, period_of_software_learning: Int, pk: Int): [UserOtherInformation!]!
  getUserPersonalInformation: [UserPersonalInformation!]!
  getUserProcessProgress: [UserProcessProgress!]!
  getUserReasonOfBreak: UserReasonOfBreak!
  tempFunction: [JoinedTable!]!
}

type UserAccessCardInformation {
  created_date: DateTime!
  deleted_date: DateTime!
  lapiscine_logical_number: Int!
  lapiscine_physical_number: Int!
  logical_number_for_main_course: Int!
  name_of_entry_card_for_main_course: String!
  pk: Int!
  profile_picture_path: String!
}

type UserBlackhole {
  blackhole_time: DateTime!
  created_date: DateTime!
  deleted_date: DateTime!
  pk: Float!
  reason_of_blackhole: String
  remaining_period: Float
}

type UserComputationFund {
  created_date: DateTime!
  deleted_date: DateTime!
  is_received_fund: String!
  no_duplicate_collection: String!
  payment_date: DateTime
  pk: Int!
  reason_of_no_duplicate: String
  recevied_amount: Int!
}

type UserEducationFundState {
  created_date: DateTime!
  deleted_date: DateTime!
  fund_period: DateTime!
  payment_delay_period: Int
  payment_end_date: DateTime!
  payment_give_start_date: DateTime!
  pk: Int!
  remaining_period_of_fund: Int
  total_calculated_month: Int!
  total_payment_of_money: Int!
  total_payment_of_number: Int!
}

type UserEmploymentAndFound {
  consent_to_provide_information: String!
  created_date: DateTime!
  deleted_date: DateTime!
  employment: String!
  employment_date: DateTime
  enterprise: String
  pk: Float!
}

type UserEmploymentStatus {
  created_date: DateTime!
  deleted_date: DateTime!
  emplyment_date: DateTime
  enterprise: String
  enterprise_size: String
  pk: Float!
}

type UserHrdNetUtilize {
  consent_to_provide_information: String!
  created_date: DateTime!
  deleted_date: DateTime!
  employment: String!
  employment_insurance_date: DateTime
  enterprise: String
  enterprise_size: String
  pk: Float!
}

type UserInternStatus {
  created_date: DateTime!
  deleted_date: DateTime!
  end_intern_date: Float
  enterprise: DateTime
  given_blackhole_day: Float
  intern_note: Float
  intern_part_of_job: Float
  is_given_blackhole: String!
  pk: Float!
  start_intern_date: Float
}

type UserLapiscineInformation {
  deleted_date: DateTime!
  lapiscine_degree: String!
  lapiscine_grade: String
  number_of_rapicin_participation: String
  participate_lapicin: String
  pk: Float!
}

type UserLearningData {
  circle: Float
  circle_date: DateTime
  coalition_score: Float
  created_date: DateTime!
  deleted_date: DateTime!
  level: Float
  level_date: DateTime
  out_circle: String
  out_circle_date: DateTime
  pk: Float!
}

type UserLeaveOfAbsence {
  absence_reason: String
  created_date: DateTime!
  deleted_date: DateTime!
  end_absence_date: DateTime
  pk: Float!
  return_from_absence_date: DateTime
  start_absence_date: DateTime
}

type UserOtherInformation {
  created_date: DateTime!
  deleted_date: DateTime!
  experience_of_software_developing: String!
  highest_level_of_education: String!
  major: String!
  major_field: String!
  major_name: String!
  period_of_software_learning: Int!
  pk: Int!
}

type UserPersonalInformation {
  birthday: String!
  created_date: DateTime!
  deleted_date: DateTime!
  email: String!
  gender: String!
  phone_number: String!
  pk: Int!
  region: String!
}

type UserProcessProgress {
  basic_expiration_date: DateTime!
  created_date: DateTime!
  deleted_date: DateTime!
  final_expiration_date: DateTime!
  pk: Float!
  request_extension: String
}

type UserReasonOfBreak {
  created_date: DateTime!
  date_of_break: DateTime!
  deleted_date: DateTime!
  pk: Float!
  reason_of_break: String
}